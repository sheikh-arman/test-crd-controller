/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	v1alpha1 "github.com/sheikh-arman/test-crd-controller/pkg/apis/arman.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BlackManLister helps list BlackMans.
// All objects returned here must be treated as read-only.
type BlackManLister interface {
	// List lists all BlackMans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BlackMan, err error)
	// BlackMans returns an object that can list and get BlackMans.
	BlackMans(namespace string) BlackManNamespaceLister
	BlackManListerExpansion
}

// blackManLister implements the BlackManLister interface.
type blackManLister struct {
	indexer cache.Indexer
}

// NewBlackManLister returns a new BlackManLister.
func NewBlackManLister(indexer cache.Indexer) BlackManLister {
	return &blackManLister{indexer: indexer}
}

// List lists all BlackMans in the indexer.
func (s *blackManLister) List(selector labels.Selector) (ret []*v1alpha1.BlackMan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BlackMan))
	})
	return ret, err
}

// BlackMans returns an object that can list and get BlackMans.
func (s *blackManLister) BlackMans(namespace string) BlackManNamespaceLister {
	return blackManNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BlackManNamespaceLister helps list and get BlackMans.
// All objects returned here must be treated as read-only.
type BlackManNamespaceLister interface {
	// List lists all BlackMans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BlackMan, err error)
	// Get retrieves the BlackMan from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BlackMan, error)
	BlackManNamespaceListerExpansion
}

// blackManNamespaceLister implements the BlackManNamespaceLister
// interface.
type blackManNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BlackMans in the indexer for a given namespace.
func (s blackManNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BlackMan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BlackMan))
	})
	return ret, err
}

// Get retrieves the BlackMan from the indexer for a given namespace and name.
func (s blackManNamespaceLister) Get(name string) (*v1alpha1.BlackMan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("blackman"), name)
	}
	return obj.(*v1alpha1.BlackMan), nil
}
